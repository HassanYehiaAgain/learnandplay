rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Helper functions for user roles and ownership
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }
    
    function isTeacher() {
      return isAuthenticated() && 
        exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'teacher';
    }
    
    function isStudent() {
      return isAuthenticated() && 
        exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'student';
    }
    
    function getSubjectTeacherId(subjectId) {
      return get(/databases/$(database)/documents/subjects/$(subjectId)).data.teacherId;
    }
    
    function isSubjectTeacher(subjectId) {
      return isTeacher() && getSubjectTeacherId(subjectId) == request.auth.uid;
    }
    
    function isEnrolledInSubject(subjectId) {
      return isStudent() && 
        exists(/databases/$(database)/documents/subjects/$(subjectId)) &&
        request.auth.uid in get(/databases/$(database)/documents/subjects/$(subjectId)).data.studentIds;
    }
    
    // User profile rules
    match /users/{userId} {
      // Anyone can read public user profiles, but only the owner can update
      allow read: if isAuthenticated();
      allow create: if isAuthenticated() && request.auth.uid == userId;
      allow update: if isOwner(userId);
      allow delete: if false; // No one can delete user profiles
    }
    
    // Subject/Class rules
    match /subjects/{subjectId} {
      // Teachers can create subjects
      allow create: if isTeacher();
      
      // Teachers who own the subject and students enrolled in the subject can read
      allow read: if isSubjectTeacher(subjectId) || isEnrolledInSubject(subjectId);
      
      // Only the teacher who owns the subject can update it
      allow update: if isSubjectTeacher(subjectId);
      
      // No one can delete subjects (handled by admin)
      allow delete: if false;
    }
    
    // Educational Games rules
    match /educational_games/{gameId} {
      function getGameTeacherId() {
        return resource.data.teacherId;
      }
      
      function getGameSubjectId() {
        return resource.data.subjectId;
      }
      
      // Teachers can create games
      allow create: if isTeacher() && 
        request.resource.data.teacherId == request.auth.uid &&
        isSubjectTeacher(request.resource.data.subjectId);
      
      // Teachers who created the game and students in the subject can read
      allow read: if isOwner(getGameTeacherId()) || isEnrolledInSubject(getGameSubjectId());
      
      // Only the teacher who created the game can update it
      allow update: if isOwner(getGameTeacherId());
      
      // No one can delete games (handled by expiration functions)
      allow delete: if false;
    }
    
    // Game Progress rules
    match /game_progress/{progressId} {
      function getStudentId() {
        return resource.data.studentId;
      }
      
      function getGameId() {
        return resource.data.gameId;
      }
      
      function getGameTeacherId(gameId) {
        return get(/databases/$(database)/documents/educational_games/$(gameId)).data.teacherId;
      }
      
      function getProgressSubjectId() {
        return resource.data.subjectId;
      }
      
      // Students can create progress for games they're enrolled in
      allow create: if isStudent() && 
        request.resource.data.studentId == request.auth.uid &&
        isEnrolledInSubject(request.resource.data.subjectId);
      
      // Students can read and update their own progress, and teachers can read progress for their games/subjects
      allow read: if isOwner(getStudentId()) || 
        isOwner(getGameTeacherId(getGameId())) ||
        isSubjectTeacher(getProgressSubjectId());
      
      // Students can update only their own progress
      allow update: if isOwner(getStudentId());
      
      // No one can delete progress records
      allow delete: if false;
    }
    
    // Settings and Gamification rules
    match /app_settings/{settingId} {
      // Everyone can read public settings, no one can write except admin
      allow read: if isAuthenticated();
      allow write: if false;
    }
    
    // Badge definitions 
    match /badges/{badgeId} {
      // Everyone can read badge definitions
      allow read: if isAuthenticated();
      allow write: if false; // Only admins can create/update badges
    }
    
    // Analytics collection
    match /analytics/{docId} {
      // Teachers can read analytics for their subjects
      allow read: if isTeacher() && 
        (resource.data.teacherId == request.auth.uid || 
         isSubjectTeacher(resource.data.subjectId));
      
      // Only the system can write analytics
      allow write: if false;
    }
    
    // User activity logs
    match /user_activity/{logId} {
      // Users can read their own activity, teachers can read for their students
      allow read: if isOwner(resource.data.userId) || 
        (isTeacher() && isSubjectTeacher(resource.data.subjectId));
      
      // Allow creation of activity logs
      allow create: if isAuthenticated() && request.resource.data.userId == request.auth.uid;
      
      // No updates or deletes
      allow update, delete: if false;
    }
  }
} 